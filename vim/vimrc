" .vimrc
" desc vimrc settings
" author kyc

"{{{ Generic Settings

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
    finish
endif

" Making VIM behavier in a more useful way
set nocompatible 

" Map Leader Setting
let mapleader="," 

set backspace=indent,eol,start

" no backup file
set nobackup 
set nowritebackup

" no swap file for buffer
set noswapfile            

" maximum width of text that is being inserted
set textwidth=120

" keep 50 lines of command line history
set history=50            

" show line number always
set number                

" display command in the last  line of the screen
set showcmd               

" do incremental searching
set incsearch             

" highlight search results
set hlsearch              

" ignore case when input search pattern
set ignorecase            

" smart case
set smartcase             

" always show page labels
set showtabline=2         

" briefly jump to the matching bracket
set showmatch             

" Number of screen lines for command-line
set cmdheight=3           

" always show status line
set laststatus=2          

" number of spaces for each step of (auto)indent
set shiftwidth=4          

" number of spaces that a <Tab> in the file counts for
set tabstop=4             

" number of spaces that a <Tab> counts for while performing editing operations
set softtabstop=4         

" use appropriate number of spaces to insert a <Tab>
set expandtab

" a <Tab> in front of a line inserts blanks according to 'shitfwidth', 'tabstop', 'ssofttabstop' is used in other palces
set smarttab              

" warp long lines
set linebreak             

" lines longer than the width of the window will wrap
set wrap                  

" program to use for the :grep command
set grepprg=grep\ -nH\ $* 

" auto indent
set autoindent            

" smart indent
set smartindent           

" c indent
if has("cindent")
    set cindent
endif

" mmarkers are used to specify folds
set foldmethod=marker     

" Error No Bell
set noerrorbells
set novisualbell

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
    set mouse=a
endif

set cursorline      "highlight the screen line of the cursor with CursorLine

set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc

" Only menu for complete
set completeopt=menu

" Use 256 colors
set t_Co=256

set termguicolors

set wildmenu

"}}}

"{{{ Key Mappings

"use Q for formatting
noremap Q gq 

" ctags Config
noremap <F3> :!ctags -R --c-kinds=+p --fields=+S .<CR><CR>

" Tab Label's Key Map Settings
noremap tc :tabnew<cr>
noremap tn :tabnext<cr>
noremap tp :tabprevious<cr>
noremap tl :tabclose<cr>

" .vimrc edit key map settings
noremap <silent> ss :source ~/.session.vim<cr><cr>
noremap <silent> ms :mksession! ~/.session.vim<cr>
noremap <silent> <leader>ss :source ~/.vim/vimrc<cr>
noremap <silent> <leader>ee :tabnew ~/.vim/vimrc<cr>
autocmd! bufwritepost .vimrc source ~/.vim/vimrc

"}}}

"{{{ Plugins

"{{{vundle 
filetype off
set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#rc()
Plugin 'gmarik/Vundle.vim'
"}}}

"{{{
Plugin 'tomasr/molokai'
colorscheme molokai
"}}}

"{{{ctrlp
Plugin 'ctrlp.vim'
let g:ctrlp_custom_ignore = '\v[\/]\.(git|svn)$'
"}}}

"{{{ag
Plugin 'rking/ag.vim'
let g:ag_working_path_mode="r"
"}}}

"{{{NERD tree
Plugin 'scrooloose/nerdtree'
noremap <silent><F5> :NERDTreeToggle<cr>
"}}}

"{{{NERD-Commenter
Plugin 'The-NERD-Commenter'
"}}}

"{{{Tabular
Plugin 'Tabular'
"if exists(":Tabularize")
noremap <leader>= :Tabularize /=<CR>
noremap <leader>: :Tabularize /:\zs<CR>
noremap <leader>- :Tabularize /)<CR>
"endif
"}}}

"{{{Tagbar
Plugin 'Tagbar'
let g:tagbar_ctags_bin = "/usr/bin/ctags"
let g:tagbar_width     = 30
noremap <silent><F4> :TagbarToggle<cr>
"}}}

"call vundle#end()
"}}}

" {{{ Special

"enable filetype plugin
filetype plugin indent on 

"enable syntax
syntax enable on 

" }}}
